/* Tab System Styles  */
.ginko-tabs-container {
  margin: -1rem 0;
  border: 1px solid var(--background-modifier-border);
  border-radius: 8px;
  background: var(--background-primary);
  overflow: hidden;
  position: relative;
}

.ginko-tab-buttons {
  display: flex;
  gap: 0.25rem;
  padding: 0.75rem 1rem 0;
  background: var(--background-secondary);
  border-bottom: 1px solid var(--background-modifier-border);
  overflow-x: auto;
  scrollbar-width: none;
}

.ginko-tab-buttons::-webkit-scrollbar {
  display: none;
}

.ginko-tab-button {
  padding: 0.5rem 1rem;
  border: 1px solid transparent;
  border-bottom: none;
  border-radius: 6px 6px 0 0;
  background: transparent;
  color: var(--text-muted);
  font-size: 0.9em;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  white-space: nowrap;
  position: relative;
  bottom: -1px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 4px;
  padding: 6px 12px;
}


.ginko-tab-icon {
  display: inline-flex;
  align-items: center;
  margin-right: 4px;
}

.ginko-tab-icon .iconify-icon {
  width: 16px;
  height: 16px;
  vertical-align: middle;
}

.ginko-tab-icon .svg-icon {
  width: 16px;
  height: 16px;
  vertical-align: middle;
}

.ginko-tab-text {
  margin-left: 4px;
}

.ginko-tab-button:hover {
  color: var(--text-normal);
  background: var(--background-modifier-hover);
}

.ginko-tab-button.active {
  background: var(--background-primary);
  border-color: var(--background-modifier-border);
  color: var(--text-accent);
  font-weight: 600;
}

.ginko-icon {
  display: flex;
  align-items: center;
  justify-content: center;

}


/* Tab Content Styles */
.ginko-tab-contents {
  background: var(--background-primary);
}

.ginko-tab-content {
  display: none;
  line-height: 1.6;
}

.ginko-tab-content.active {
  display: block;
}


/* Tab Editor */
.ginko-tab-editor {
  min-height: 1em;
  padding: 4px;
  border: 1px solid transparent;
  border-radius: 4px;
  outline: none;
}

.ginko-tab-editor:hover {
  border-color: #ddd;
}

.ginko-tab-editor:focus {
  border-color: #0366d6;
}

/* Edit Button Styles */
.ginko-tabs-container .edit-block-button {
  position: absolute;
  top: 8px;
  right: 8px;
  z-index: 10;
  opacity: 0;
  transition: opacity 0.2s ease;
  cursor: pointer;
  border-radius: 4px;
  padding: 4px;
  color: var(--text-muted);
  background: var(--background-secondary);
}

.ginko-tabs-container:hover .edit-block-button {
  opacity: 1;
}

.ginko-tabs-container .edit-block-button:hover {
  color: var(--text-normal);
  background: var(--background-modifier-hover);
}

.ginko-tabs-container .edit-block-button svg {
  width: 16px;
  height: 16px;
  display: block;
}

/* Ensure the managed container itself doesn't add extra unexpected space if it was a P tag */
.ginko-tabs-container-managed {
  /* margin: 0; 
     padding: 0; /* These might be needed if ::tabs was on a <p> tag */
}

/* Your existing .ginko-tabs-container styles might now apply to .ginko-tabs-container-managed directly
   or to children created by TabsBlockManager.render(). 
   The new TabsBlockManager.render() creates:
   - .ginko-tab-buttons
   - .ginko-tab-contents
   So, styles targeting these should still work.
*/

.ginko-tabs-container, /* Keep for old processor if still in use during transition */
.ginko-tabs-container-managed { /* Styles for the new managed container */
  margin: -1rem 0; /* Example style from your original */
  border: 1px solid var(--background-modifier-border);
  border-radius: 8px;
  background: var(--background-primary);
  overflow: hidden;
  position: relative;
}

/* This class is added to original elements managed by the system before they are re-parented */
.ginko-tab-managed-element-hidden {
  display: none !important; /* Force hide */
}

/* Placeholder styling for empty/error states */
.tabs-placeholder, .tabs-error {
    padding: 1em;
    text-align: center;
    color: var(--text-muted);
    border: 1px dashed var(--background-modifier-border);
    margin: 0.5em;
    border-radius: 4px;
}
.tabs-error {
    color: var(--text-error);
    border-color: var(--text-error);
}
